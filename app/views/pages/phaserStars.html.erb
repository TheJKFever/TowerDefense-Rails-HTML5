<body id="phaserBackground">
  <!-- NAVIGATION BAR -->
  <div class="fixed" style="margin-bottom:50px">
    <nav>
      <div id="phaserHeader">
        <%= link_to "", phaserStars_path, class: "headerLink" %>
        <ul class="button-group radius" style="float:right; padding:13px 13px 0 13px;">
          <li style="width:150px, height:50px">
            <%= link_to "Tower Defense", towerDefense_path, class: "button" %>
          </li>
          <li style="width:170px"><%= link_to :ScoreBoard, scoreboard_path, class: "button" %></li>
          <%= render 'layouts/nav_right' %> 
        </ul>
      </div>
        <%= render 'layouts/notice' %>
    </nav>
  </div>
  <div class="row" style="margin-bottom: 130px"></div>
  <!-- END NAVIGATION BAR -->
  <% content_for :title, "Phaser Stars" %>
  <%= javascript_include_tag "phaser.min.js" %>
  <!-- Main Page Content and Sidebar -->
  <div class="row">
    <!-- Game Section -->
    <div class="large-9 columns" role="content">
      <div id="phaserStars" class="gameWindow">
      </div>
    </div>
    <!-- End Game Section -->

    <!-- Sidebar -->
    <aside class="large-3 columns" style="padding: 0px">
      <div class="highscore10 scoreboard">
        <h5 style="text-align:center">Top 10 High Scores</h5>
        <ul class="side-nav">
         <li style="width: 80px;float:right"><strong>High Score</strong></li>
         <li style="width: 165px;text-align:left"><strong>Username</strong></li>
         <% @highscores.each_with_index do |score, i| %>
         <li style="width: 65px;float:right"><%= score.value %></li>
         <li style="width: 175px;text-align:left"><%= i.to_s + ".) " + score.user.username %></li>
         <% end %>
       </ul>
     </div>
     <div class="panel">
      <h5>Place Ad Here</h5>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris</p>
      <a href="#">CLICK HERE!!! &rarr;</a>
    </div>
  </aside>
  <!-- End Sidebar -->
</div>
<!-- End Main Content and Sidebar -->
<script type="text/javascript">
var game = new Phaser.Game(800, 600, Phaser.AUTO, 'phaserStars', { preload: preload, create: create, update: update });
var jumpcount = 0;
var multiplayer = false;
var starsCount = 0;
var multiplier = 1;
var nextLevel = 0;
var dogSpeed = 1;
var nextDiamond = 100;
var diamondCount = 0;
var scoreOffset = 2;
var multiplierText, player1Text, player2Text, gameOverText, restartIcon;

function preload() {
    // Load Images
    game.load.image('background2', '<%= asset_path('game_images/background2.png') %>');
    game.load.image('platform', '<%= asset_path('game_images/brick_platform.png') %>');
    game.load.image('safeplatform', '<%= asset_path('game_images/brick_small_platform.png') %>');
    game.load.image('ground', '<%= asset_path('game_images/platform.png') %>');
    game.load.image('star', '<%= asset_path('game_images/star.png') %>');
    game.load.image('extraLife', '<%= asset_path('game_images/firstaid.png') %>');
    game.load.image('diamond', '<%= asset_path('game_images/diamond.png') %>');
    game.load.image('ruby', '<%= asset_path('game_images/ruby.png') %>');
    game.load.image('restart', '<%= asset_path('game_images/restart.png') %>');
    game.load.image('singlePlayerBtn', '<%= asset_path('game_images/singleplayer.png') %>');
    game.load.image('multiPlayerBtn', '<%= asset_path('game_images/multiplayer.png') %>');

    // Load Sprites
    game.load.spritesheet('dude', '<%= asset_path('game_images/dude.png') %>', 32, 48);
    game.load.spritesheet('bluedude', '<%= asset_path('game_images/bluedude.png') %>', 32, 48);
    game.load.spritesheet('dog', '<%= asset_path('game_images/baddie.png') %>', 32, 32);

    // Load Audios
    game.load.audio('die', ['<%= asset_path('audio/die.mp3') %>', '<%= asset_path('audio/die.ogg') %>']);
    game.load.audio('running', ['<%= asset_path('audio/running.mp3') %>','<%= asset_path('audio/running.ogg') %>']);
    game.load.audio('collect', ['<%= asset_path('audio/collect.mp3') %>','<%= asset_path('audio/collect.ogg') %>']);
    game.load.audio('levelUp', ['<%= asset_path('audio/levelUp.mp3') %>','<%= asset_path('audio/levelUp.ogg') %>']);
  }

  function create() {
    setupStage();
    dogs = game.add.group();
    collectables = game.add.group();
    players = game.add.group();
    arrows = game.input.keyboard.createCursorKeys();
    awsd = {
      up: game.input.keyboard.addKey(Phaser.Keyboard.W),
      left: game.input.keyboard.addKey(Phaser.Keyboard.A),
      right: game.input.keyboard.addKey(Phaser.Keyboard.D)    
    }

    // Create Sounds
    dieSound = game.add.audio('die', 0.3);
    collectSound = game.add.audio('collect', 0.3);
    levelUpSound = game.add.audio('levelUp', 0.9);
    game.initiated = false;

    singlePlayerBtn = game.add.button(game.width/2-235, game.height/2-90, 'singlePlayerBtn', function(){setupGame(false)});
    multiPlayerBtn = game.add.button(game.width/2-230, game.height/2+20, 'multiPlayerBtn', function(){setupGame(true)});
  }

  function update() {
    //  Collide the player and the collectables with the platforms
    game.physics.collide(players, platforms);
    game.physics.collide(collectables, platforms);
    game.physics.collide(collectables, collectables);
    game.physics.overlap(players, collectables, collect, null, this);
    game.physics.overlap(players, dogs, die, null, this);
    if (game.initiated){
      player1.body.velocity.x = 0;
      //PAUSE GAME
      if (pause.justPressed()){
        game.paused = !game.paused;
      }

      //CAPTURE KEYS FOR PLAYERS
      if (multiplayer){
        captureKeysFor(player1,awsd);
        captureKeysFor(player2,arrows);
      } else {
        captureKeysFor(player1,arrows);
      }

      //ANIMATE DOGS
      //animate dog1
      if (dog1.x <= ledge1.x){
        dog1.animations.play('right');
        dog1.body.velocity.x = 170*dogSpeed;
      } else if (dog1.x >= ledge1.topRight.x-32){
        dog1.animations.play('left');
        dog1.body.velocity.x = -170*dogSpeed;
      }
      //animate dog2
      if (dog2.x <= ledge2.x){
        dog2.animations.play('right');
        dog2.body.velocity.x = 170*dogSpeed;
      } else if (dog2.x >= ledge2.topRight.x-32){
        dog2.animations.play('left');
        dog2.body.velocity.x = -170*dogSpeed;
      }
      //animate dog3
      if (dog3.x <= 8){
        dog3.animations.play('right');
        dog3.body.velocity.x = 170*dogSpeed;
      } else if (dog3.x >= 760){
        dog3.animations.play('left');
        dog3.body.velocity.x = -170*dogSpeed;
      }
      //animate dog4
      if (dog4.x <= 8){
        dog4.animations.play('right');
        dog4.body.velocity.x = 170*dogSpeed;
      } else if (dog4.x >= 760){
        dog4.animations.play('left');
        dog4.body.velocity.x = -170*dogSpeed;
      }

      //ANIMATE LEDGES
      //animate ledge1
      if (ledge1.direction=="right" || ledge1.topRight.x <= 35){
        ledge1.direction = "right";
        ledge1.body.velocity.x = 50*dogSpeed;
        ledge1.body.y = 250;
      }
      if (ledge1.direction=="left" || ledge1.x >= 770){
        ledge1.direction = "left";
        ledge1.body.velocity.x = -50*dogSpeed;
        ledge1.body.y = 250;
      }

      //animate ledge2
      if (ledge2.direction=="right" || ledge2.topRight.x <= 35){
        ledge2.direction = "right";
        ledge2.body.velocity.x = 50*dogSpeed;
        ledge2.body.y = 400;
      }
      if (ledge2.direction=="left" || ledge2.x >= 770){
        ledge2.direction = "left";
        ledge2.body.velocity.x = -50*dogSpeed;
        ledge2.body.y = 400;
      }

      //LEVLE UP!
      if (multiplayer){
        if ((player1.score + player2.score)>(Math.pow(1.8,nextLevel)*2000)){
          levelUp();
        }
      } else {
        if (player1.score>(Math.pow(1.8,nextLevel)*2000)){
          levelUp();
        }
      } 
    }
  }

  function captureKeysFor(player, keygroup) {
  //player MOVEMENTS
    if (player.alive){
      if (keygroup.left.isDown) { //  Move to the left
        player.body.velocity.x = -350;
        player.runningSound.resume();
        if (player.body.touching.down){
          player.animations.play('left');
        }
        else player.frame = 1;
      } else if (keygroup.right.isDown) { //  Move to the right
        player.body.velocity.x = 350;
        player.runningSound.resume();
        if (player.body.touching.down){
          player.animations.play('right');
        }
        else player.frame = 6;
      } else {  //  Stand still
        player.runningSound.pause();
        player.animations.stop();
        player.frame = 4;
      }
      //  DOUBLE JUMP
      if (keygroup.up.isDown) {
        if (player.body.touching.down){
          player.jumpcount=0;
        }
        if (player.body.velocity.y>=-200 && player.jumpcount<2){
          player.jumpcount++;
          player.body.velocity.y = -500; 
        }
      }
    }
  }

  function collect (player, item) {
    //  Add and update the score
    collectSound.play();
    if (item.key == 'extraLife'){
      player.lives++;
      player.livesText.content = 'lives: ' + player.lives;
    } else if (item.key == 'diamond'){
      player.score += (75*multiplier);
      diamondCount++;
      if (diamondCount>20){
        diamondCount=0;
        addRuby();
      }
    } else if (item.key == 'ruby'){
      player.score += (500*multiplier);
    }
    else {
      player.score += (10*multiplier);
      starsCount--;
    }
    item.destroy();
    if (multiplayer){
      if (player2.score.toString().length>scoreOffset){
        player2.scoreText.x -= 15;
        scoreOffset++;
      }
    }
    if (player.score>nextDiamond){
      nextDiamond+=100*multiplier;
      addDiamond();
    }
    if (starsCount < 5){
      addStars();
    }
    player.scoreText.content = 'Score: ' + player.score;
  }

  function levelUp(){
    levelUpSound.play();
    nextLevel++;
    multiplier++;
    dogSpeed*=1.1;
    addExtraLife();
    multiplierText.content = "Multiplier: "+multiplier+"x";
  }

  function die (player) {
    console.log("player died");
    if (player.alive){
      player.runningSound.pause();
      player.lives -= 1;
      player.livesText.content = 'lives: ' + player.lives;
      if (player.lives < 2){
        addExtraLife();
      }
      if (player.lives==0){
        player.runningSound.stop();
        player.kill();
        if (multiplayer){
          if (player1.lives<=0 && player2.lives<=0){
            gameover();
            gameOverText.content = "GAME OVER";
            restartIcon = game.add.button(game.width/2-116, game.height/2-50, 'restart', function(){ resetGame(true) });
            singlePlayerBtn = game.add.button(game.width/2-235, game.height/2+60, 'singlePlayerBtn', function(){resetGame(false)});
            return;
          }
        } else {
          gameover();
          gameOverText.content = "GAME OVER";
          restartIcon = game.add.button(game.width/2-116, game.height/2-50, 'restart', function(){ resetGame(false) });
          multiPlayerBtn = game.add.button(game.width/2-230, game.height/2+60, 'multiPlayerBtn', function(){resetGame(true)});
          return;
        }
        return;
      }
      dieSound.play();
      player.kill();
      deathPlayer = game.add.sprite(player.x, player.y, player.key, 4);
      deathPlayer.body.gravity.y = 1300;
      deathPlayer.body.velocity.y = -350;
      deathPlayer.outOfBoundsKill = true;
      setTimeout(function(){respawn(player)},1000);
    }
  }

  function respawn (player) {
    player.reset(385, 0);
    player.revive();
  }

  function addStars(){
    var j = 0;
    for (var j=0; j<2; j++) {
      for (var i = 0; i < 18; i++) {  //  Create a star inside of the 'collectables' group
        var star = collectables.create(i*45, (Math.random()*80)+(j*330), 'star');
        starsCount++;
        star.body.collideWorldBounds = true;
        star.body.gravity.y = 1300;
        star.body.bounce.x = 0.7 + Math.random() * 0.2;
        star.body.bounce.y = 0.7 + Math.random() * 0.2;
        star.angle = Math.random()*90;
      }
    }
  }

  function addExtraLife(){
    var extraLife = collectables.create(Math.random()*800, 0, 'extraLife');
    extraLife.body.collideWorldBounds = true;
    extraLife.body.gravity.y = 1300;
    extraLife.body.bounce.y = 0.7 + Math.random() * 0.2;
  }

  function addDiamond(){
    var diamond = collectables.create(Math.random()*800, 0, 'diamond');
    diamond.body.collideWorldBounds = true;
    diamond.body.gravity.y = 1300;
    diamond.body.bounce.y = 0.7 + Math.random() * 0.2;
  }

  function addRuby(){
    var ruby = collectables.create(Math.random()*800, 0, 'ruby');
    ruby.body.collideWorldBounds = true;
    ruby.body.gravity.y = 1300;
    ruby.body.bounce.y = 0.7 + Math.random() * 0.2;

  }

  function gameover(){
    game.initiated = false;
    dog1.body.velocity.x = 0;
    dog2.body.velocity.x = 0;
    dog3.body.velocity.x = 0;
    dog4.body.velocity.x = 0;
    ledge1.body.velocity.x = 0;
    ledge2.body.velocity.x = 0;
  }

  function setupStage(){
  //  A simple background for our game
  game.add.sprite(0, 0, 'background2');
    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();
    ground = platforms.create(0, game.world.height - 32, 'ground');
    ground.scale.setTo(2, 1);
    ground.body.immovable = true;
    ledge1 = game.add.sprite(-150, 250, 'platform');
    ledge1.body.velocity.x = 50;
    ledge1.body.immovable = true;
    ledge1.direction = "right";
    ledge2 = game.add.sprite(400, 400, 'platform');
    ledge2.body.velocity.x = -50;
    ledge2.body.immovable = true;
    ledge2.direction = "left";
    safeLedge = game.add.sprite(300, 100, 'safeplatform');
    safeLedge.body.immovable = true;
    platforms.add(ledge1); 
    platforms.add(ledge2);
    platforms.add(safeLedge);
    pause = game.input.keyboard.addKey(Phaser.Keyboard.P);
    multiplierText = game.add.text(340, 16, 'Multiplier: 1x', { font: '28px arial', fill: '#000' });
    gameOverText = game.add.text(game.world.width/2-180, game.world.height/2-150, '', { font: '60px arial', fill: '#000' });
  }

  function resetVariables(){
    singlePlayerBtn.kill();
    multiPlayerBtn.kill();
    collectables = game.add.group();
    starsCount = 0;
    multiplier = 1;
    nextLevel = 0;
    dogSpeed = 1;
    nextDiamond = 100;
    diamondCount = 0;
  }

  function setupGame(twoPlayers){
    resetVariables();

    // INITIALIZE PLAYER1
    var player1x = twoPlayers? 300 : 385;
    player1 = Player(player1x, 0, 'bluedude', 4);
    player1Text = game.add.text(16, 16, 'Player 1', { font: '28px arial', fill: '#000' });
    player1.scoreText = game.add.text(16, 50, 'Score: 0', { font: '28px arial', fill: '#000' });
    player1.livesText = game.add.text(16, 84, 'lives: 5', { font: '28px arial', fill: '#000' });
    players.add(player1);

    // INITIALIZE PLAYER2
    if (twoPlayers){
      multiplayer = true;
      player2 = Player(470, 0, 'dude', 4);
      player2Text = game.add.text(660, 16, 'Player 2', { font: '28px arial', fill: '#000' });
      player2.scoreText = game.add.text(650, 50, 'Score: 0', { font: '28px arial', fill: '#000' });
      player2.livesText = game.add.text(675, 84, 'lives: 5', { font: '28px arial', fill: '#000' });
      players.add(player2);
    }

    // INITIALIZE DOGS
    dog1 = Dog(0, 218, 'dog', 170);
    dog2 = Dog(500, 368, 'dog', 170);
    dog3 = Dog(600, game.world.height - 64, 'dog', -170);
    dog4 = Dog(0, game.world.height - 64, 'dog', -170);
    dogs.add(dog1);
    dogs.add(dog2);
    dogs.add(dog3);
    dogs.add(dog4);

    addStars();
    game.initiated = true;
  }

  function resetGame(twoPlayers){
    collectables.removeAll();
    restartIcon.kill();
    multiplierText.content = 'Multiplier: 1x';
    gameOverText.content = '';
    resetVariables();

    // RESET LEDGES
    ledge1.reset(-150, 250);
    ledge1.body.velocity.x = 50;
    ledge1.direction = "right";
    ledge2.reset(400, 400);
    ledge2.body.velocity.x = -50;
    ledge2.direction = "left";

    // The player and its settings
    player1.revive();
    var player1x = twoPlayers? 300 : 385;    
    player1.reset(player1x, 0);
    player1.score = 0;  
    player1.lives = 5;
    player1.jumpcount = 0;
    player1Text.content = 'Player 1';
    player1.scoreText.content = 'Score: 0';
    player1.livesText.content = 'lives: 5'; 

    if (twoPlayers){
      multiplayer = true;
      player2.revive();
      player2.reset(300, 0);
      player1.score = 0;  
      player2.lives = 5;
      player2.jumpcount = 0;
      player2Text.content = 'Player 2';
      player2.scoreText.content = 'Score: 0';
      player2.livesText.content = 'lives: 5'; 
    }
    multiplayer = twoPlayers;

    // dogs = game.add.group();
    dog1.reset(0, 218);
    dog1.animations.play('right');
    dog1.body.velocity.x = 170;
    dog2.reset(500, 368);
    dog2.animations.play('right');
    dog2.body.velocity.x = 170;
    dog3.reset(600, game.world.height - 64);
    dog3.animations.play('left');
    dog3.body.velocity.x = -170;
    dog4.reset(0, game.world.height - 64);
    dog4.animations.play('left');
    dog4.body.velocity.x = -170;

    addStars();
    game.initiated = true;
  }

  var Player = function(x, y, spritesheet, frame){
    var player = game.add.sprite(x, y, spritesheet, frame);
    player.body.bounce.y = 0.08;
    player.body.gravity.y = 1300;
    player.body.collideWorldBounds = true;
    player.animations.add('left', [0, 1, 2, 3], 10, true);
    player.animations.add('right', [5, 6, 7, 8], 10, true);
    player.lives = 5;
    player.jumpcount = 0;
    player.score = 0;
    player.runningSound = game.add.sound('running', 0.1);
    player.runningSound.play();
    player.runningSound.pause();
    player.runningSound.loop = true;
    return player;
  }

  var Dog = function(x, y, key, velocity){
    var dog = game.add.sprite(x, y, key);
    dog.animations.add('left', [0, 1], 10, true);
    dog.animations.add('right', [2, 3], 10, true);
    dog.body.velocity.x = 170;
    if (velocity>=0){
      dog.animations.play('right');
    } else {
      dog.animations.play('left');
    }
    return dog;
  }

</script>